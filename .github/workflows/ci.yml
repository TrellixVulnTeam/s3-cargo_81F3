name: Test

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        python: [3.9, 3.8.10]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Setup S3 Credentials
        env:
          S3_PUBLIC_KEY: ${{secrets.S3_PUBLIC_KEY}}
          S3_SECRET_KEY: ${{secrets.S3_SECRET_KEY}}
        run: |
          mkdir -p ~/.aws
          touch ~/.aws/credentials
          echo "[default]" >> ~/.aws/credentials
          echo "aws_access_key_id=${S3_PUBLIC_KEY}" >> ~/.aws/credentials
          echo "aws_secret_access_key=${S3_SECRET_KEY}" >> ~/.aws/credentials
      - uses: actions/checkout@v2.3.5
        with:
          fetch-depth: 0
      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v2.2.2
        with:
          python-version: ${{ matrix.python }}
      - name: Install poetry
        run: |
          python -m pip install poetry
      - uses: syphar/restore-virtualenv@v1
        id: cache-virtualenv
        with:
          requirement_files: poetry.lock

      - uses: syphar/restore-pip-download-cache@v1
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

      - run: poetry install
        if: steps.cache-virtualenv.outputs.cache-hit != 'true'

      - uses: actions/cache@v2.1.6
        with:
          path: ~/.cache/pip
          key: ${{ matrix.os }}-pip-${{ secrets.CACHE_SEED }}-${{ matrix.python }}-${{ hashFiles('./poetry.lock') }}
          restore-keys: ${{ matrix.os }}-pip-${{ secrets.CACHE_SEED }}-${{ matrix.python }}-
      - name: Test
        env:
          S3_URL: ${{secrets.S3_URL}}
          S3_BUCKET: ${{secrets.S3_BUCKET}}
        run: |
          poetry run coverage run --module pytest
      - name: Verify test coverage
        run: |
          poetry run coverage xml
      - uses: codecov/codecov-action@v2
        with:
          files: ./coverage.xml # optional
          name: codecov-umbrella # optional
          fail_ci_if_error: true # optional (default = false)
          verbose: true # optional (default = false)
          token: ${{ secrets.CODECOV_TOKEN }}
